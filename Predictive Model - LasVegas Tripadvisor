{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bf16e495",
   "metadata": {},
   "source": [
    "# Import dataset\n",
    "\n",
    "First of all I import all the necessaries packages and my dataset into Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a18f0253",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# importing libraries\n",
    "import pandas as pd                                  # data science essentials\n",
    "import matplotlib.pyplot as plt                      # data visualization\n",
    "import seaborn as sns                                # enhanced data visualization\n",
    "import numpy as np                                   # mathematical essentials\n",
    "import statsmodels.formula.api as smf                # regression modeling\n",
    "from sklearn.model_selection import train_test_split # train/test split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# specifying the path and file name\n",
    "file = './LasVegasTripAdvisorReviews-1.xlsx'\n",
    "\n",
    "# reading the file into Python\n",
    "LasVegas = pd.read_excel(file)\n",
    "\n",
    "# checking the file\n",
    "LasVegas.head(n = 5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e67dd1d4",
   "metadata": {},
   "source": [
    "# Looking for NaN\n",
    "\n",
    "Even if from the dataset source we could see there are no NaN, we quickly check\n",
    "anyway to be sure. As expected, no NaN values were detected in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c71c2e2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Checking the NaN\n",
    "LasVegas.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f22e67dc",
   "metadata": {},
   "source": [
    "# Checking data type\n",
    "\n",
    "Now displaying information about columns to check data type\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc84bce6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#checking datasets information\n",
    "LasVegas.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55d757bd",
   "metadata": {},
   "source": [
    "We have 14 categorical variables, this means we need to encode them to see\n",
    "their correlation with the Y variable. I've done some research about how to \n",
    "encode a list of categorical variables. For reference, this is the link with\n",
    "the code I've used for this part: https://github.com/akshi8/Trip_Advisor_Reviews_LasVegas/blob/master/code/EDA.ipynb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0d517722",
   "metadata": {},
   "outputs": [],
   "source": [
    "# list of categorical variables\n",
    "categorical = list(LasVegas.select_dtypes(include=['object']).columns.values)\n",
    "categorical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab292a35",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing packages\n",
    "from sklearn import preprocessing\n",
    "le = preprocessing.LabelEncoder()\n",
    "\n",
    "#substituting months with seasons\n",
    "\n",
    "['Dec-Feb' 'Mar-May' 'Jun-Aug' 'Sep-Nov']\n",
    "LasVegas['Period of stay'] = LasVegas['Period of stay'].map({'Dec-Feb':'winter', 'Mar-May':'spring', 'Jun-Aug' :'summer','Sep-Nov':'autumn'})\n",
    "\n",
    "\n",
    "#data[categorical[i]] = le.fit_transform(data[categorical[i]])\n",
    "\n",
    "for i in range(0, len(categorical)):\n",
    "    print(LasVegas[categorical[i]].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f31e6a8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#Encoding categorical features with numbers\n",
    "for i in range(0, len(categorical)):\n",
    "    LasVegas[categorical[i]] = le.fit_transform(LasVegas[categorical[i]])\n",
    "    \n",
    "LasVegas.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e564cf7",
   "metadata": {},
   "source": [
    "# Renaming columns\n",
    "\n",
    "To have \"unique words\", otherwise my code will not run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7adb8dad",
   "metadata": {},
   "outputs": [],
   "source": [
    "LasVegas.rename({\"User country\":\"User_country\",\n",
    "                 \"Nr. reviews\": \"Nr_reviews\",\n",
    "                 \"Nr. hotel reviews\": \"Nr_hotel_reviews\",\n",
    "                 \"Period of stay\": \"Period_of_stay\",\n",
    "                 \"Traveler type\": \"Traveler_type\",\n",
    "                 \"Tennis court\": \"Tennis_court\",\n",
    "                 \"Free internet\": \"Free_internet\",\n",
    "                 \"Hotel name\": \"Hotel_name\",\n",
    "                 \"Hotel stars\": \"Hotel_stars\",\n",
    "                 \"Nr. rooms\": \"Nr_rooms\",\n",
    "                 \"User continent\": \"User_continent\",\n",
    "                \"Member years\": \"Member_years\",\n",
    "                \"Review month\": \"Review_month\",\n",
    "                \"Review weekday\": \"Review_weekday\",\n",
    "                \"Helpful votes\": \"Helpful_votes\"}, inplace=True,axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6ccaefd",
   "metadata": {},
   "source": [
    "# Linear Correlation\n",
    "\n",
    "I'll use the correlation method Pearson to see how the x variables are related\n",
    "to my y \"Helpful_votes\". "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3254b862",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Linear Correlation for LasVegas dataset\n",
    "LasVegas_corr = LasVegas.corr(method = 'pearson').round(decimals = 1)\n",
    "LasVegas_corr.loc[ : , 'Helpful_votes'].round(decimals = 2).sort_values(ascending = True , )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bdc20ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "#generate col+ for reg\n",
    "for col in LasVegas:\n",
    "    print(col + \" +\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "089ba0ff",
   "metadata": {},
   "source": [
    "# Running a regression model\n",
    "\n",
    "I'll now run a regression model with all the x variables "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d95dabf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#first try to for all feature\n",
    "# importing an additional package\n",
    "import statsmodels.formula.api as smf # predictive modeling with nice outputs\n",
    "# Step 1: INSTANTIATE a model object\n",
    "# Linear Regression\n",
    "linear_regression = smf.ols(formula =  \"\"\"Helpful_votes ~\n",
    "User_country +\n",
    "Nr_reviews +\n",
    "Nr_hotel_reviews +\n",
    "Score +\n",
    "Period_of_stay +\n",
    "Traveler_type +\n",
    "Pool +\n",
    "Gym +\n",
    "Tennis_court +\n",
    "Spa +\n",
    "Casino +\n",
    "Free_internet +\n",
    "Hotel_name +\n",
    "Hotel_stars +\n",
    "Nr_rooms +\n",
    "User_continent +\n",
    "Member_years +\n",
    "Review_month +\n",
    "Review_weekday\n",
    "\"\"\",\n",
    "                  data = LasVegas)\n",
    "\n",
    "\n",
    "# Step 2: FIT the data into the model object\n",
    "results = linear_regression.fit()\n",
    "\n",
    "\n",
    "# Step 3: analyze the SUMMARY output\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42a033b4",
   "metadata": {},
   "source": [
    "Output: running a regression with all the x variables allows me to see which is \n",
    "the value of all the p values. I'll remove p-values bigger than 0.05 as it means\n",
    "that they are not significant but I'll keep Hotel_stars as it's a categorical \n",
    "variable and it gives me a lower p-value about 0.092. I'll use Nr_reviews, \n",
    "Nr_hotel_reviews and Hotel_stars for my regression model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "704fa9d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "LasVegas.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c551679",
   "metadata": {},
   "outputs": [],
   "source": [
    "linear_regression_reduced = smf.ols(formula =  \"\"\"Helpful_votes ~\n",
    "Nr_reviews +\n",
    "Nr_hotel_reviews +\n",
    "Hotel_stars\n",
    "\n",
    "\"\"\",\n",
    "                  data = LasVegas)\n",
    "\n",
    "\n",
    "# Step 2: FIT the data into the model object\n",
    "results_reduced = linear_regression_reduced.fit()\n",
    "\n",
    "\n",
    "# Step 3: analyze the SUMMARY output\n",
    "print(results_reduced.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1e8f775",
   "metadata": {},
   "source": [
    "I'll keep these three as variables as Nr_reviews and Nr_hotel_reviews give me \n",
    "p-value of 0.000 and Hotel_stars is about 0.051."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29121df0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# log transforming and saving it to the dataset\n",
    "eps = 0.000001\n",
    "LasVegas['log_Helpful_votes'] = np.log(LasVegas['Helpful_votes']+eps)\n",
    "LasVegas['log_Nr_reviews'] = np.log(LasVegas['Nr_reviews']+eps)\n",
    "LasVegas['log_Nr_hotel_reviews'] = np.log(LasVegas['Nr_hotel_reviews']+eps)\n",
    "LasVegas['log_Hotel_stars'] = np.log(LasVegas['Hotel_stars']+eps)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea4003e6",
   "metadata": {},
   "source": [
    "# Preparing training and set for model development"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09efc542",
   "metadata": {},
   "outputs": [],
   "source": [
    "# preparing response variable data\n",
    "LasVegas_data = LasVegas.loc[:, ['Nr_reviews', 'Nr_hotel_reviews', 'Hotel_stars']]\n",
    "\n",
    "# preparing response variable data\n",
    "LasVegas_target = LasVegas.loc[ : , 'Helpful_votes']\n",
    "log_LasVegas_target = LasVegas.loc[ : , 'log_Helpful_votes']\n",
    "\n",
    "\n",
    "# preparing training and testing sets\n",
    "x_train, x_test, y_train, y_test = train_test_split(\n",
    "            LasVegas_data,\n",
    "            LasVegas_target,\n",
    "            test_size = 0.25,\n",
    "            random_state = 219)\n",
    "\n",
    "\n",
    "# checking the shapes of the datasets\n",
    "print(f\"\"\"\n",
    "Training Data\n",
    "-------------\n",
    "X-side: {x_train.shape}\n",
    "y-side: {y_train.shape[0]}\n",
    "\n",
    "\n",
    "Testing Data\n",
    "------------\n",
    "X-side: {x_test.shape}\n",
    "y-side: {y_test.shape[0]}\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e21a55fd",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#generating data list \n",
    "x_variables = ['User_country', 'Nr_reviews', 'Nr_hotel_reviews',\n",
    "       'Score', 'Period_of_stay', 'Traveler_type', 'Pool', 'Gym',\n",
    "       'Tennis_court', 'Spa', 'Casino', 'Free_internet', 'Hotel_name',\n",
    "       'Hotel_stars', 'Nr_rooms', 'User_continent', 'Member_years',\n",
    "       'Review_month', 'Review_weekday']\n",
    "\n",
    "#\n",
    "for val in x_variables:\n",
    "    print(f\"{val} +\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fa56334",
   "metadata": {},
   "source": [
    "Concatenate together x_train and y_train to work with statsmodel. I'll test my\n",
    "best model to see how it's performing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b90e85f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# merging X_train and y_train so that they can be used in statsmodels\n",
    "LasVegas_train = pd.concat([x_train, y_train], axis = 1)\n",
    "\n",
    "# Step 1: build a model\n",
    "lm_best = smf.ols(formula = \"\"\"Helpful_votes ~ \n",
    "Nr_reviews +\n",
    "Nr_hotel_reviews +\n",
    "Hotel_stars\n",
    "                                         \n",
    "                                        \"\"\",\n",
    "                            data = LasVegas_train)\n",
    "\n",
    "# Step 2: fit the model based on the data\n",
    "results = lm_best.fit()\n",
    "\n",
    "\n",
    "# Step 3: analyze the summary output\n",
    "print(results.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e95f05b5",
   "metadata": {},
   "source": [
    "# OLS Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d714c68",
   "metadata": {},
   "outputs": [],
   "source": [
    "# applying model in scikit-learn\n",
    "\n",
    "# preparing x-variables\n",
    "ols_data = LasVegas.loc[:, x_variables]\n",
    "LasVegas_data = LasVegas.drop(columns=\"Helpful_votes\")\n",
    "LasVegas_target = LasVegas.loc[:,\"Helpful_votes\"]\n",
    "\n",
    "\n",
    "###############################################\n",
    "# setting up more than one train-test splits \n",
    "###############################################\n",
    "# FULL X-dataset \n",
    "x_train_FULL, x_test_FULL, y_train_FULL, y_test_FULL = train_test_split(\n",
    "            LasVegas_data,     # x-variables\n",
    "            LasVegas_target,   # y-variable\n",
    "            test_size = 0.25,\n",
    "            random_state = 219)\n",
    "\n",
    "\n",
    "# OLS p-value x-dataset\n",
    "x_train_OLS, x_test_OLS, y_train_OLS, y_test_OLS = train_test_split(\n",
    "            ols_data,         # x-variables\n",
    "            LasVegas_target,   # y-variable\n",
    "            test_size = 0.25,\n",
    "            random_state = 219)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe493701",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# INSTANTIATING a model object\n",
    "lr = LinearRegression()\n",
    "\n",
    "\n",
    "# FITTING to the training data\n",
    "lr_fit = lr.fit(x_train_OLS, y_train_OLS)\n",
    "\n",
    "\n",
    "# PREDICTING on new data\n",
    "lr_pred = lr_fit.predict(x_test_OLS)\n",
    "\n",
    "\n",
    "# SCORING the results\n",
    "print('OLS Training Score :', lr.score(x_train_OLS, y_train_OLS).round(4))  # using R-square\n",
    "print('OLS Testing Score  :',  lr.score(x_test_OLS, y_test_OLS).round(4)) # using R-square\n",
    "\n",
    "lr_train_score = lr.score(x_train_OLS, y_train_OLS).round(4)\n",
    "lr_test_score = lr.score(x_test_OLS, y_test_OLS).round(4)\n",
    "\n",
    "# displaying and saving the gap between training and testing\n",
    "print('OLS Train-Test Gap :', abs(lr_train_score - lr_test_score).round(4))\n",
    "lr_test_gap = abs(lr_train_score - lr_test_score).round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4d97592",
   "metadata": {},
   "source": [
    "I've tried to run it using the OLS but I'll also try with the FULL and see if I \n",
    "can reduce the gap and obtain a better R squared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc4fa442",
   "metadata": {},
   "outputs": [],
   "source": [
    "# INSTANTIATING a model object\n",
    "lr1 = LinearRegression()\n",
    "\n",
    "\n",
    "# FITTING to the training data\n",
    "lr1_fit = lr1.fit(x_train_FULL, y_train_FULL)\n",
    "\n",
    "\n",
    "# PREDICTING on new data\n",
    "lr1_pred = lr1_fit.predict(x_test_FULL)\n",
    "\n",
    "\n",
    "# SCORING the results\n",
    "print('OLS Training Score :', lr1.score(x_train_FULL, y_train_FULL).round(4)) \n",
    "print('OLS Testing Score  :',  lr1.score(x_test_FULL, y_test_FULL).round(4)) \n",
    "\n",
    "lr1_train_score = lr1.score(x_train_FULL, y_train_FULL).round(4)\n",
    "lr1_test_score = lr1.score(x_test_FULL, y_test_FULL).round(4)\n",
    "\n",
    "# displaying and saving the gap between training and testing\n",
    "print('OLS Train-Test Gap :', abs(lr1_train_score - lr1_test_score).round(4))\n",
    "lr1_test_gap = abs(lr1_train_score - lr1_test_score).round(4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "439c6f54",
   "metadata": {},
   "source": [
    "I've obtained a better R squared, I'll keep the FULL one as OLS model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ce425b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# zipping each feature name to its coefficient\n",
    "lr1_model_values = zip(LasVegas[x_variables].columns,\n",
    "                      lr1_fit.coef_.round(decimals = 2))\n",
    "\n",
    "\n",
    "# setting up a placeholder list to store model features\n",
    "lr1_model_lst = [('intercept', lr1_fit.intercept_.round(decimals = 2))]\n",
    "\n",
    "\n",
    "# printing out each feature-coefficient pair one by one\n",
    "for val in lr1_model_values:\n",
    "    lr1_model_lst.append(val)\n",
    "    \n",
    "\n",
    "# checking the results\n",
    "for pair in lr1_model_lst:\n",
    "    print(pair)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf9f957e",
   "metadata": {},
   "source": [
    "# Lasso Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "591986bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sklearn\n",
    "# INSTANTIATING a model object\n",
    "lasso_model = sklearn.linear_model.Lasso(alpha     = 1.0,  # default shrinkage\n",
    "                                         normalize = False) # default magitude\n",
    "\n",
    "\n",
    "# FITTING to the training data\n",
    "lasso_fit = lasso_model.fit(x_train_FULL, y_train_FULL)\n",
    "\n",
    "\n",
    "# PREDICTING on new data\n",
    "lasso_pred = lasso_fit.predict(x_test_FULL)\n",
    "\n",
    "\n",
    "# SCORING the results\n",
    "print('Lasso Training Score :', lasso_model.score(x_train_FULL, y_train_FULL).round(4))\n",
    "print('Lasso Testing Score  :', lasso_model.score(x_test_FULL, y_test_FULL).round(4))\n",
    "\n",
    "\n",
    "# saving scoring data for future use\n",
    "lasso_train_score = lasso_model.score(x_train_FULL, y_train_FULL).round(4) \n",
    "lasso_test_score  = lasso_model.score(x_test_FULL, y_test_FULL).round(4)   \n",
    "\n",
    "\n",
    "# displaying and saving the gap between training and testing\n",
    "print('Lasso Train-Test Gap :', abs(lasso_train_score - lasso_test_score).round(4))\n",
    "lasso_test_gap = abs(lasso_train_score - lasso_test_score).round(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "889eacf8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# zipping each feature name to its coefficient\n",
    "lasso_model_values = zip(LasVegas_data.columns, lasso_fit.coef_.round(decimals = 2))\n",
    "\n",
    "\n",
    "# setting up a placeholder list to store model features\n",
    "lasso_model_lst = [('intercept', lasso_fit.intercept_.round(decimals = 2))]\n",
    "\n",
    "\n",
    "# printing out each feature-coefficient pair one by one\n",
    "for val in lasso_model_values:\n",
    "    lasso_model_lst.append(val)\n",
    "    \n",
    "\n",
    "# checking the results\n",
    "for pair in lasso_model_lst:\n",
    "    print(pair)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "036d62cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dropping coefficients that are equal to zero\n",
    "\n",
    "# printing out each feature-coefficient pair one by one\n",
    "for feature, coefficient in lasso_model_lst:\n",
    "        \n",
    "        if coefficient == 0:\n",
    "            lasso_model_lst.remove((feature, coefficient))\n",
    "\n",
    "            \n",
    "# checking the results\n",
    "for pair in lasso_model_lst:\n",
    "    print(pair)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9d4e4cc",
   "metadata": {},
   "source": [
    "# ARD Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e3431ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# INSTANTIATING a model object\n",
    "ard_model = sklearn.linear_model.ARDRegression(normalize  = False)\n",
    "\n",
    "\n",
    "# FITTING the training data\n",
    "ard_fit = ard_model.fit(x_train_FULL, y_train_FULL)\n",
    "\n",
    "\n",
    "# PREDICTING on new data\n",
    "ard_pred = ard_fit.predict(x_test_FULL)\n",
    "\n",
    "\n",
    "print('Training Score:', ard_model.score(x_train_FULL, y_train_FULL).round(4))\n",
    "print('Testing Score :',  ard_model.score(x_test_FULL, y_test_FULL).round(4))\n",
    "\n",
    "\n",
    "# saving scoring data for future use\n",
    "ard_train_score = ard_model.score(x_train_FULL, y_train_FULL).round(4)\n",
    "ard_test_score  = ard_model.score(x_test_FULL, y_test_FULL).round(4)\n",
    "\n",
    "\n",
    "# displaying and saving the gap between training and testing\n",
    "print('ARD Train-Test Gap :', abs(ard_train_score - ard_test_score).round(4))\n",
    "ard_test_gap = abs(ard_train_score - ard_test_score).round(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a1d4217",
   "metadata": {},
   "outputs": [],
   "source": [
    "# zipping each feature name to its coefficient\n",
    "ard_model_values = zip(LasVegas_data.columns, ard_fit.coef_.round(decimals = 5))\n",
    "\n",
    "\n",
    "# setting up a placeholder list to store model features\n",
    "ard_model_lst = [('intercept', ard_fit.intercept_.round(decimals = 2))]\n",
    "\n",
    "\n",
    "# printing out each feature-coefficient pair one by one\n",
    "for val in ard_model_values:\n",
    "    ard_model_lst.append(val)\n",
    "    \n",
    "\n",
    "# checking the results\n",
    "for pair in ard_model_lst:\n",
    "    print(pair)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "36f64dee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dropping coefficients that are equal to zero\n",
    "\n",
    "# printing out each feature-coefficient pair one by one\n",
    "for feature, coefficient in ard_model_lst:\n",
    "        \n",
    "        if coefficient == 0:\n",
    "            ard_model_lst.remove((feature, coefficient))\n",
    "\n",
    "            \n",
    "# checking the results\n",
    "for pair in ard_model_lst:\n",
    "    print(pair)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a55dbb1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# comparing results\n",
    "\n",
    "print(f\"\"\"\n",
    "Model             Train Score         Test Score          Train Test Gap                                         \n",
    "-----             -----------         ----------          ----------               \n",
    "OLS***              {lr1_train_score.round(3)}               {lr_test_score.round(3)}             {lr1_test_gap.round(3)}    \n",
    "Lasso               {lasso_train_score.round(3)}               {lasso_test_score.round(3)}             {lasso_test_gap.round(3)}\n",
    "ARD                 {ard_train_score.round(3)}               {ard_test_score.round(3)}             {ard_test_gap.round(3)}\n",
    "                        \n",
    "\"\"\")\n",
    "\n",
    "\n",
    "# creating a dictionary for model results\n",
    "model_performance = {\n",
    "    \n",
    "    'Model Type'    : ['OLS***', 'Lasso', 'ARD'],\n",
    "           \n",
    "    'Training' : [lr1_train_score.round(3), lasso_train_score.round(3),\n",
    "                                   ard_train_score.round(3)],\n",
    "           \n",
    "    'Testing'  : [lr1_test_score.round(3), lasso_test_score.round(3),\n",
    "                                   ard_test_score.round(3)],\n",
    "                    \n",
    "    'Train-Test Gap' : [lr1_test_gap.round(3), lasso_test_gap.round(3),\n",
    "                                        ard_test_gap.round(3)],\n",
    "                    \n",
    "    'Model Size' : [len(lr1_model_lst), len(lasso_model_lst),\n",
    "                                    len(ard_model_lst)]\n",
    "    }\n",
    "                    \n",
    "\n",
    "# converting model_performance into a DataFrame\n",
    "model_performance = pd.DataFrame(model_performance)\n",
    "\n",
    "model_performance\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "054b816a",
   "metadata": {},
   "source": [
    "My best model is OLS, with an higher R squared and a lower gap"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
